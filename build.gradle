// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = "1.5.10"
    ext.dokka_version = "0.10.0"

    def mcVersionStr = project.name.tokenize('-')[0]
    def (major, minor, patch) = mcVersionStr.tokenize('.')
    def mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
    def fabric = mcVersion >= 11400 && project.name.endsWith("-fabric")
    project.ext.mcVersion = mcVersion
    project.ext.mcVersionStr = mcVersionStr
    project.ext.mcPlatform = fabric ? 'fabric' : 'forge'
    project.ext.fabric = fabric

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://maven.fabricmc.net/" }
        if (!fabric) maven { url "https://maven.minecraftforge.net/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        if (fabric) {
            classpath 'fabric-loom:fabric-loom.gradle.plugin:0.8-SNAPSHOT'
        } else if (mcVersion >= 11400) {
            classpath('net.minecraftforge.gradle:ForgeGradle:5.0.5') { // later versions emit tsrg2
                exclude group: 'trove', module: 'trove' // preprocessor/idea requires more recent one
            }
        } else {
            def forgeGradleVersion = mcVersion >= 11200 ? '34ab703' : // FG 2.3
                                     mcVersion >= 10904 ? '5d1e8d8' : // FG 2.2
                                                          'd1a7165'   // FG 2.1
            classpath("com.github.ReplayMod:ForgeGradle:$forgeGradleVersion:all") {
                exclude group: 'net.sf.trove4j', module: 'trove4j' // preprocessor/idea requires more recent one
                exclude group: 'trove', module: 'trove' // different name same thing
            }
        }
    }
}

//apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    maven { url 'https://repository.apache.org/content/repositories/releases/org/apache/xmlgraphics/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
}

def FG3 = !fabric && mcVersion >= 11400
def FABRIC = fabric

if (FABRIC) {
    apply plugin: 'fabric-loom'
} else if (FG3) {
    apply plugin: 'net.minecraftforge.gradle'
} else {
    apply plugin: 'net.minecraftforge.gradle.forge'
}

apply plugin: 'com.replaymod.preprocess'
mcVersion = project.ext.mcVersion

preprocess {
    vars.put("MC", mcVersion)
    vars.put("FABRIC", project.fabric ? 1 : 0)
    vars.put("FORGE", project.fabric ? 0 : 1)
}

version = project.parent.version
group = "gg.essential" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Elementa" + project.name

sourceCompatibility = targetCompatibility = mcVersion >= 11700 ? 16 : 1.8
compileJava.options.encoding = 'UTF-8'
compileKotlin.kotlinOptions {
    jvmTarget = mcVersion >= 11700 ? "16" : "1.8"
    freeCompilerArgs = [mcVersion >= 11400 ? "-Xjvm-default=all" : "-Xjvm-default=all-compatibility"]
}

if (mcVersion >= 11400) {
    sourceSets {
        api
    }
}

if (!FABRIC) {
    configurations {
        modApi
        api.extendsFrom(modApi)
        modImplementation
        implementation.extendsFrom(modImplementation)
    }
}

if (FABRIC) {
    minecraft {
        runConfigs.all {
            ideConfigGenerated = true
        }
    }
} else {
    minecraft {
        if (FG3) {
            runs {
                client {
                    workingDirectory rootProject.file('run')
                    property 'forge.logging.console.level', 'info'
                    mods {
                        examplemod {
                            source sourceSets.main
                        }
                    }
                }
            }
        } else {
            runDir = "run"
        }

        if (!FG3) {
            version = [
                    11202: '1.12.2-14.23.0.2486',
                    11201: '1.12.1-14.22.0.2444',
                    11200: '1.12-14.21.1.2387',
                    11102: '1.11.2-13.20.0.2216',
                    11100: '1.11-13.19.1.2188',
                    11002: '1.10.2-12.18.2.2099',
                    10904: '1.9.4-12.17.0.1976',
                    10809: '1.8.9-11.15.1.2318-1.8.9',
                    10800: '1.8-11.14.4.1563',
                    10710: '1.7.10-10.13.4.1558-1.7.10',
            ][mcVersion]
            mappings = [
                    11404: "snapshot_20190719-1.14.3",
                    11202: "snapshot_20170615",
                    11201: "snapshot_20170615",
                    11200: "snapshot_20170615",
                    11102: "snapshot_20161220",
                    11100: "snapshot_20161111",
                    11002: "snapshot_20160518",
                    10904: "snapshot_20160518",
                    10809: "stable_22",
                    10800: "snapshot_nodoc_20141130",
                    10710: "stable_12",
            ][mcVersion]
        } else {
            mappings channel: 'snapshot', version: [
                    11502: '20200220-1.15.1',
                    11602: '20200723-1.16.1'
            ][mcVersion]
        }
    }
}

dependencies {
    // Using the "mod" prefix will allow Loom to automatically remap the dependencies (to configured yarn mappings) and
    // to configure the maven publication such that we externally still depend on the non-remapped dep.
    // The Api/Implementation difference is the same as in Gradle.
    modApi "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    modApi "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    modApi "gg.essential:universalcraft-${mcVersionStr}-${mcPlatform}:164"
    modImplementation "org.commonmark:commonmark:0.17.1"
    modImplementation "org.commonmark:commonmark-ext-gfm-strikethrough:0.17.1"
    modImplementation "org.commonmark:commonmark-ext-ins:0.17.1"
    modImplementation "org.dom4j:dom4j:2.1.1"

    if (FABRIC) {
        minecraft 'com.mojang:minecraft:' + [
                11404: '1.14.4',
                11502: '1.15.2',
                11601: '1.16.1',
                11602: '1.16.2',
                11701: '1.17.1',
        ][mcVersion]
        mappings 'net.fabricmc:yarn:' + [
                11404: '1.14.4+build.16',
                11502: '1.15.2+build.14',
                11601: '1.16.1+build.17:v2',
                11602: '1.16.2+build.1:v2',
                11701: '1.17.1+build.39:v2',
        ][mcVersion]
        modImplementation 'net.fabricmc:fabric-loader:0.11.6'
        def fabricApiVersion = [
                11404: '0.4.3+build.247-1.14',
                11502: '0.5.1+build.294-1.15',
                11601: '0.14.0+build.371-1.16',
                11602: '0.17.1+build.394-1.16',
                11701: '0.38.1+1.17',
        ][mcVersion]
        def fabricApiModules = [
                "api-base",
                "networking-v0",
                "keybindings-v0",
                "resource-loader-v0",
                "lifecycle-events-v1",
        ]
        if (mcVersion >= 11600) {
            fabricApiModules.add("key-binding-api-v1")
        }
        fabricApiModules.each { module ->
            // Using this combo to add it to our deps but not to our maven publication cause it's only for the example
            modRuntime(modCompileOnly(fabricApi.module("fabric-$module", fabricApiVersion)))
        }
    }

    if (FG3) {
        minecraft 'net.minecraftforge:forge:' + [
                11404: '1.14.4-28.1.113',
                11502: '1.15.2-31.1.18',
                11602: '1.16.2-33.0.58'
        ][mcVersion]
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching(['fabric.mod.json']) {
        expand 'version': project.version
        filter { it.replace('"com.example.examplemod.ExampleMod"', '') }
    }

    exclude "mcmod.info"
    exclude "mods.toml"
    exclude "META-INF/mods.toml"
}


dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

jar {
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'

    exclude('com/example/examplemod/**')
    exclude("META-INF/mods.toml")
    exclude("mods.toml")
    exclude("kotlin/**")
    manifest {
        attributes(
                'FMLModType': 'LIBRARY'
        )
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "elementa-$mcVersionStr-$mcPlatform"

            if (!FABRIC) // handled by Loom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != "forge" && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            if (FABRIC) {
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            } else {
                artifact jar
                artifact sourcesJar
            }
        }
    }

    if (project.hasProperty("nexus_user") && project.hasProperty("nexus_password")) {
        repositories {
            maven {
                name 'nexus'
                url "https://repo.sk1er.club/repository/maven-releases/"

                credentials {
                    username project.nexus_user
                    password project.nexus_password
                }
            }
        }
    }
}
