// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = "1.3.72"
    ext.dokka_version = "0.10.0"

    def mcVersion
    def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
    mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
    def fabric = mcVersion >= 11400 && project.name.endsWith("-fabric")
    project.ext.mcVersion = mcVersion
    project.ext.fabric = fabric

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            name = "fabric"
            url = "https://maven.fabricmc.net/"
        }
        if (!fabric) {
            maven {
                name = "forge"
                url = "https://files.minecraftforge.net/maven"
            }
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
        if (fabric) {
            classpath 'fabric-loom:fabric-loom.gradle.plugin:0.4-SNAPSHOT'
        } else if (mcVersion >= 11400) {
            classpath('net.minecraftforge.gradle:ForgeGradle:3.+'){
                exclude group: 'trove', module: 'trove' // preprocessor/idea requires more recent one
            }
        } else {
            classpath('com.github.ReplayMod:ForgeGradle:' + (
                    mcVersion >= 11200 ? 'b64de9c' : // FG 2.3
                            mcVersion >= 10904 ? '5bb7a53' : // FG 2.2
                                    'fc1eabc'   // FG 2.1
            ) + ':all') {
                exclude group: 'net.sf.trove4j', module: 'trove4j' // preprocessor/idea requires more recent one
                exclude group: 'trove', module: 'trove' // different name same thing
            }
        }
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    jcenter()
    maven {
        name = "kryonet"
        url = "http://clojars.org/repo/"
    }
    maven {
        url 'https://repository.apache.org/content/repositories/releases/org/apache/xmlgraphics/'
    }
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
}

def FG3 = !fabric && mcVersion >= 11400
def FABRIC = fabric

if (FABRIC) {
    apply plugin: 'fabric-loom'
} else if (FG3) {
    apply plugin: 'net.minecraftforge.gradle'
} else {
    apply plugin: 'net.minecraftforge.gradle.forge'
}

apply plugin: 'com.replaymod.preprocess'
mcVersion = project.ext.mcVersion

preprocess {
    vars.put("MC", mcVersion)
    vars.put("FABRIC", project.fabric ? 1 : 0)
    vars.put("FORGE", project.fabric ? 0 : 1)
}

version = this.properties.getOrDefault("BUILD_ID", "LOCAL") //BUILD_ID
group = "club.sk1er" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Elementa" + project.name

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

if (mcVersion >= 11400) {
    sourceSets {
        api
    }
}

if (FABRIC) {
    minecraft {
        refmapName = 'mixins.replaymod.refmap.json'
        autoGenIDERuns = true
    }
} else {
    minecraft {
        if (FG3) {
            runs {
                client {
                    workingDirectory rootProject.file('run')
                    property 'forge.logging.console.level', 'info'
                    mods {
                        examplemod {
                            source sourceSets.main
                        }
                    }
                }
            }
        } else {
            if (mcVersion >= 10800) {
                coreMod = 'com.replaymod.core.LoadingPlugin'
            }
            runDir = "run"
        }

        if (!FG3) {
            version = [
                    11202: '1.12.2-14.23.0.2486',
                    11201: '1.12.1-14.22.0.2444',
                    11200: '1.12-14.21.1.2387',
                    11102: '1.11.2-13.20.0.2216',
                    11100: '1.11-13.19.1.2188',
                    11002: '1.10.2-12.18.2.2099',
                    10904: '1.9.4-12.17.0.1976',
                    10809: '1.8.9-11.15.1.1722',
                    10800: '1.8-11.14.4.1563',
                    10710: '1.7.10-10.13.4.1558-1.7.10',
            ][mcVersion]
            mappings = [
                    11404: "snapshot_20190719-1.14.3",
                    11202: "snapshot_20170615",
                    11201: "snapshot_20170615",
                    11200: "snapshot_20170615",
                    11102: "snapshot_20161220",
                    11100: "snapshot_20161111",
                    11002: "snapshot_20160518",
                    10904: "snapshot_20160518",
                    10809: "stable_22",
                    10800: "snapshot_nodoc_20141130",
                    10710: "stable_12",
            ][mcVersion]
        } else {
            mappings channel: 'snapshot', version: [
                    11502: '20200220-1.15.1',
                    11602: '20200723-1.16.1'
            ][mcVersion]
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "club.sk1er:UniversalCraft:new-versions-17-${mcVersion}${FABRIC ? "-fabric" : ""}-SNAPSHOT"
    implementation "org.dom4j:dom4j:2.1.1"

    implementation ('org.slick2d:slick2d-core:1.0.2') {
        exclude module: 'lwjgl'
    }
    if (FABRIC) {
        minecraft 'com.mojang:minecraft:' + [
                11404: '1.14.4',
                11502: '1.15.2',
                11601: '1.16.1',
                11602: '1.16.2',
        ][mcVersion]
        mappings 'net.fabricmc:yarn:' + [
                11404: '1.14.4+build.16',
                11502: '1.15.2+build.14',
                11601: '1.16.1+build.17:v2',
                11602: '1.16.2+build.1:v2',
        ][mcVersion]
        modCompile 'net.fabricmc:fabric-loader:' + [
                11404: '0.7.8+build.189',
                11502: '0.7.8+build.189',
                11601: '0.8.8+build.202',
                11602: '0.9.1+build.205',
        ][mcVersion]
        def fabricApiVersion = [
                11404: '0.4.3+build.247-1.14',
                11502: '0.5.1+build.294-1.15',
                11601: '0.14.0+build.371-1.16',
                11602: '0.17.1+build.394-1.16',
        ][mcVersion]
        def fabricApiModules = [
                "api-base",
                "networking-v0",
                "keybindings-v0",
                "resource-loader-v0",
        ]
        if (mcVersion >= 11600) {
            fabricApiModules.add("key-binding-api-v1")
        }
        fabricApiModules.each { module ->
            modCompile fabricApi.module("fabric-$module", fabricApiVersion)
            include fabricApi.module("fabric-$module", fabricApiVersion)
        }
    }

    if (FG3) {
        minecraft 'net.minecraftforge:forge:' + [
                11404: '1.14.4-28.1.113',
                11502: '1.15.2-31.1.18',
                11602: '1.16.2-33.0.58'
        ][mcVersion]
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
        exclude "mods.toml"
        exclude "META-INF/mods.toml"
    }
}

tasks.removeByName('shadowJar') // we want to base our shadowed jar on the reobfJar output, not the sourceSet output
task shadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    from { (FABRIC ? tasks.remapJar : tasks.jar).archiveFile.get() }
    dependsOn { FABRIC ? tasks.remapJar : (mcVersion >= 10800 ? tasks.reobfJar : tasks.reobf) }

    manifest.inheritFrom tasks.jar.manifest

    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'

    exclude('com/example/examplemod/**')
    exclude("META-INF/mods.toml")
    exclude("mods.toml")
    exclude("kotlin/**")

    if (this.properties.getOrDefault("IS_CTJS", false)) {
        relocate 'club.sk1er', 'club.sk1er.ctjs'
    }
}
tasks.assemble.dependsOn tasks.shadowJar

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

jar {
    manifest {
        attributes(
            'FMLModType': 'LIBRARY'
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "Elementa"

            def branchStr = this.properties.getOrDefault("branch", "master") != "master" ? this.properties.getOrDefault("branch", "master") + "-" : ""
            def fabricStr = FABRIC ? "-fabric" : ""
            def snapshotStr = this.properties.getOrDefault("IS_CI", false) ? "-SNAPSHOT" : ""
            version = "$branchStr${project.version}-$mcVersion$fabricStr$snapshotStr"

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != "forge" && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        maven {
            name 'nexus'
            url "https://repo.sk1er.club/repository/maven-${this.properties.getOrDefault("IS_CI", false) ? "snapshots" : "releases"}/"

            credentials {
                username project.nexus_user
                password project.nexus_password
            }
        }
    }
}
